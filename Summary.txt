# Project Summary: Running Linux 5.4 ARM on QEMU with Minimal Rootfs

## Objective
Set up, build, and run the Linux 5.4 kernel for 32-bit ARM (vexpress-a9) on QEMU, using a minimal BusyBox-based initramfs. Document all steps, scripts, and troubleshooting in detail.

---

## Detailed Steps and Actions

### 1. Environment Preparation
- Installed all required packages for cross-compiling, kernel building, and QEMU emulation:
  - `qemu-system-arm`, `gcc-arm-linux-gnueabi`, `build-essential`, `libncurses-dev`, `wget`, `bc`, `bison`, `flex`, `libssl-dev`, `make`, `u-boot-tools`
- All work was organized under the directory: `$HOME/ARM_HELP`

### 2. Kernel Source Acquisition and Build
- Downloaded Linux 5.4 source from kernel.org:
  - `wget https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-5.4.tar.xz`
  - Extracted to `$HOME/ARM_HELP/linux-5.4`
- Configured for QEMU's `vexpress-a9` board:
  - `make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- vexpress_defconfig`
- Built the kernel image and device tree blob (DTB):
  - `make -j$(nproc) ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- zImage`
  - `make -j$(nproc) ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- dtbs`
- Kernel config file is located at: `$HOME/ARM_HELP/linux-5.4/.config`

### 3. Minimal Root Filesystem (initramfs) Creation
- Downloaded and built BusyBox 1.36.1 statically for ARM:
  - `wget https://busybox.net/downloads/busybox-1.36.1.tar.bz2`
  - Extracted to `$HOME/ARM_HELP/busybox-1.36.1`
  - Configured with `make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- defconfig`
  - Enabled static build: `sed -i 's/# CONFIG_STATIC is not set/CONFIG_STATIC=y/' .config`
  - Built and installed to `$HOME/ARM_HELP/initramfs`
- Created minimal directory structure: `bin`, `sbin`, `etc`, `proc`, `sys`, `usr/bin`, `usr/sbin`, `dev`
- Wrote a custom `init` script at the root of initramfs:
  ```sh
  #!/bin/sh
  mount -t proc none /proc
  mount -t sysfs none /sys
  echo "Welcome to ARM Linux 5.4 QEMU!"
  exec /bin/sh
  ```
- Made `init` executable and created device nodes:
  - `chmod +x initramfs/init`
  - `sudo mknod -m 622 initramfs/dev/console c 5 1`
  - `sudo mknod -m 666 initramfs/dev/null c 1 3`
- Packed the initramfs:
  - `find . -print0 | cpio --null -ov --format=newc | gzip -9 > ../initramfs-arm.cpio.gz`

### 4. QEMU Boot
- Used the following QEMU command to boot the kernel with the initramfs:
  ```bash
  qemu-system-arm \
    -M vexpress-a9 \
    -m 512M \
    -kernel linux-5.4/arch/arm/boot/zImage \
    -dtb linux-5.4/arch/arm/boot/dts/vexpress-v2p-ca9.dtb \
    -initrd initramfs-arm.cpio.gz \
    -append 'console=ttyAMA0 init=/init' \
    -nographic
  ```
- The system boots to a BusyBox shell with a welcome message.

### 5. Automation
- Created a script `run_arm_kernel_qemu.sh` to automate all steps:
  - Downloads, builds, and configures kernel and BusyBox
  - Creates initramfs
  - Prints the QEMU command for easy booting

### 6. Troubleshooting and Debugging
- Verified that `/init` and `/bin/sh` exist and are executable in the initramfs.
- Ensured correct shebang, permissions, and device nodes.
- Confirmed kernel `.config` location and QEMU usage.
- Provided step-by-step manual and automated workflows.

---

## Key Files and Locations
- **Kernel Source/Build:** `$HOME/ARM_HELP/linux-5.4`
- **Kernel Config:** `$HOME/ARM_HELP/linux-5.4/.config`
- **BusyBox Source/Build:** `$HOME/ARM_HELP/busybox-1.36.1`
- **Initramfs Directory:** `$HOME/ARM_HELP/initramfs`
- **Packed Initramfs:** `$HOME/ARM_HELP/initramfs-arm.cpio.gz`
- **Automation Script:** `$HOME/ARM_HELP/run_arm_kernel_qemu.sh`

---

## Outcome
- Successfully created a minimal ARM Linux 5.4 QEMU environment with a BusyBox shell.
- Fully documented all steps, scripts, and troubleshooting for reproducibility and future reference.

---

## Next Steps (Optional)
- Add networking support or custom applications to the rootfs.
- Experiment with custom kernel configs or additional QEMU devices.
- Automate QEMU boot within the script if desired.

---

**Prepared by Cascade AI Assistant on 2025-05-13**
